class Solution:
    def __init__(self):
        MAXN = 301
        self.father = list(range(MAXN))
        self.size = list(range(MAXN))
        self.virus = list(range(MAXN))
        self.cnts = list(range(MAXN))
        self.infect = list(range(MAXN))
    
    def build(self, n, initial):
        self.father[:n] = [i for i in range(n)]
        self.size[:n] = [1] * n
        self.virus[:n] = [False] * n
        self.cnts[:n] = [0] * n
        self.infect[:n] = [-1] * n
        for i in initial:
            self.virus[i] = True

    def find(self, e):
        if e != self.father[e]:
            self.father[e] = self.find(self.father[e])
        return self.father[e]
    
    def union(self, a, b):
        a_f, b_f = self.find(a), self.find(b)
        if a_f != b_f:
            self.father[a_f] = b_f
            self.size[b_f] += self.size[a_f]

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        self.build(n, initial)
        # 普通點，合併
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1 and not self.virus[i] and not self.virus[j]:
                    self.union(i, j)
        # 病毒點附近的連接關係
        for v in initial:
            for node in range(n):
                if node != v and not self.virus[node] and graph[v][node] == 1:
                    node_father = self.find(node)
                    if self.infect[node_father] == -1:
                        self.infect[node_father] = v
                    if self.infect[node_father] != -2 and self.infect[node_father] != v:
                        self.infect[node_father] = -2
        # 統計拯救數據
        for node in range(n):
            if node == self.find(node) and self.infect[node] >= 0:
                self.cnts[self.infect[node]] += self.size[node]
        # Initial 排序，返回拯救最多節點的最小索引
        initial.sort()
        ans = initial[0]
        val = self.cnts[ans]
        for v in initial:
            if self.cnts[v] > val:
                ans = v
                val = self.cnts[v]
        return ans